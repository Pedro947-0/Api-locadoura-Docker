name: CI/CD Docker build and Test

on:
  push:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: ▶️ Criar arquivo .env a partir de Secrets (não mostrar valores)
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          echo "Criando .env com as variáveis necessárias (não exibindo valores)..."
          printf "DB_PASSWORD=%s\n" "$DB_PASSWORD" > .env
          printf "JWT_SECRET=%s\n" "$JWT_SECRET" >> .env

      - name: 🔧 Instalar o docker compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: 🐋 Subir ambiente com Docker Compose (rebuild)
        run: docker-compose up -d --build --remove-orphans

      - name: ⏱️ Esperar o Spring Boot terminar o startup (logs)
        run: |
          echo "Aguardando o Spring Boot terminar o startup (até 10 minutos)..."
          for i in $(seq 1 60); do
            # checa nos últimos 200 linhas se há indicação de startup concluído
            if docker-compose logs --no-color api-spring | tail -n 200 | grep -E "Started .*Application|Started .* in|Tomcat started|Started" >/dev/null 2>&1; then
              echo "Spring Boot aparentemente iniciou (detected in logs)."
              break
            fi
            echo "Ainda não detectado (tentativa $i/60). Aguardando 10s..."
            sleep 10
          done

      - name: ⏱️ Aguardar os contêineres estabilizarem
        run: |
          echo "Aguardando 10 segundos adicionais para os serviços estabilizarem..."
          sleep 10

      - name: 🩺 Verificar status dos contêineres
        run: |
          echo "--- Status dos Contêineres ---"
          docker-compose ps || true
          echo "--- Logs do Banco de Dados (últimos 200 linhas) ---"
          docker-compose logs --no-color --tail=200 postgres-db || echo "Serviço 'postgres-db' não encontrado ou sem logs."
          echo "--- Logs da API (últimos 200 linhas) ---"
          docker-compose logs --no-color --tail=200 api-spring || echo "Serviço 'api-spring' não encontrado ou sem logs."

      - name: 📞 Realizar teste de saúde na API
        run: |
          set -e
          # Testa endpoints em ordem: actuator/health (mais direto) e depois swagger como fallback
          TARGETS=("http://localhost:8080/actuator/health" "http://localhost:8080/swagger-ui/index.html")
          ATTEMPTS=18
          SLEEP=10

          for tgt in "${TARGETS[@]}"; do
            echo "Tentando endpoint: $tgt"
            for i in $(seq 1 $ATTEMPTS); do
              if curl --fail --silent --show-error --max-time 5 "$tgt" > /dev/null 2>&1; then
                echo "Endpoint $tgt respondeu (tentativa $i)."
                exit 0
              else
                echo "Tentativa $i para $tgt falhou, aguardando ${SLEEP}s..."
                sleep $SLEEP
              fi
            done
            echo "Endpoint $tgt não respondeu após $ATTEMPTS tentativas, tentando próximo endpoint..."
          done

          echo "Nenhum endpoint respondeu. Imprimindo logs da API para depuração..."
          docker-compose logs --no-color --tail=500 api-spring || true
          echo "Imprimindo logs do banco para depuração..."
          docker-compose logs --no-color --tail=500 postgres-db || true

          # Tenta detectar erros conhecidos nas últimas linhas de log
          echo "--- Últimas linhas relevantes (grep 'Exception' / 'ERROR') ---"
          docker-compose logs --no-color api-spring | tail -n 200 | grep -E "Exception|ERROR|Caused by" || true

          exit 1

      - name: 🛑 Parar os contêineres após teste
        if: always()
        run: docker-compose down

      - name: ✅ Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🚀 Preparar buildx
        uses: docker/setup-buildx-action@v2

      - name: 🚀 Build e Push da imagem para o Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/locadora-veiculos:latest
