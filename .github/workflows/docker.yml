name: CI/CD Docker build and Test

on:
  push:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install docker compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create .env from secrets
        run: |
          echo "Creating .env from secrets..."

          # Entrada de secrets (podem vir do env do job)
          DB_PASSWORD=${DB_PASSWORD:-}
          JWT_SECRET=${JWT_SECRET:-}

          # Defaults seguros para CI local se secrets não estiverem definidos
          if [ -z "$DB_PASSWORD" ]; then
            echo "WARNING: DB_PASSWORD not set — using default 'postgres' for CI (set secret in repo)."
            DB_PASSWORD=postgres
          fi
          if [ -z "$JWT_SECRET" ]; then
            echo "WARNING: JWT_SECRET not set — generating temporary value."
            JWT_SECRET=$(openssl rand -hex 12 || echo "dev-secret")
          fi

          # Valores do Postgres (compatíveis com docker-compose.yml existente)
          POSTGRES_USER=${POSTGRES_USER:-postgres}
          POSTGRES_DB=${POSTGRES_DB:-locadora-db}

          # Mapear senhas: POSTGRES_PASSWORD e SPRING_DATASOURCE_PASSWORD caem back para DB_PASSWORD
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-$DB_PASSWORD}
          SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD:-$DB_PASSWORD}

          # Criar .env com todas as variáveis necessárias para o docker-compose
          printf '%s\n' \
            "POSTGRES_USER=${POSTGRES_USER}" \
            "POSTGRES_DB=${POSTGRES_DB}" \
            "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" \
            "DB_PASSWORD=${DB_PASSWORD}" \
            "SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}" \
            "JWT_SECRET=${JWT_SECRET}" > .env

          echo ".env created (content not shown for security)"

      - name: Start docker-compose
        run: docker-compose up -d --build

      - name: Wait for Postgres
        run: |
          echo "Waiting for Postgres to accept connections..."
          max_attempts=60
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts"

            if docker-compose exec -T postgres-db pg_isready -U ${POSTGRES_USER:-postgres} >/dev/null 2>&1; then
              echo "Postgres ready (pg_isready)"
              exit 0
            fi

            container_id=$(docker-compose ps -q postgres-db 2>/dev/null || true)
            if [ -n "$container_id" ]; then
              health_status=$(docker inspect --format='{{if .State.Health}}{{.State.Health.Status}}{{end}}' "$container_id" 2>/dev/null || true)
              if [ "$health_status" = "healthy" ]; then
                echo "Postgres container health=healthy"
                exit 0
              fi
            fi

            if bash -c "</dev/tcp/localhost/5432" >/dev/null 2>&1; then
              echo "Postgres listening on localhost:5432"
              exit 0
            fi

            attempt=$((attempt+1))
            sleep 1
          done

          echo "Postgres did not become ready in time; printing logs"
          docker-compose logs --no-color --tail=200 postgres-db || true
          exit 1

      - name: Check containers
        run: |
          docker-compose ps
          docker-compose logs postgres-db || true
          docker-compose logs api-spring || true

      - name: Test swagger
        run: |
          if curl --fail --silent --show-error --max-time 10 http://localhost:8080/swagger-ui/index.html >/dev/null 2>&1; then
            echo "Swagger responded"
          else
            echo "Swagger did not respond; printing API logs"
            docker-compose logs --no-color --tail=300 api-spring || true
            exit 1
          fi

      - name: Teardown
        if: always()
        run: docker-compose down

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/locadora-veiculos:latest
