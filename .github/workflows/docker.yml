name: CI/CD Docker build and Test

on:
  push:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: 🔧 Instalar o docker compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: 🐋 Subir ambiente com Docker Compose
        run: docker-compose up -d --build

      - name: ⏱️ Aguardar Postgres ficar pronto (pg_isready / fallback TCP)
        run: |
          echo "Aguardando Postgres aceitar conexões..."
          set -e

          # Primeiro, tenta usar pg_isready dentro do container (se o utilitário estiver disponível no contêiner postgres)
          for i in $(seq 1 60); do
            if docker-compose exec -T postgres-db pg_isready -U ${POSTGRES_USER:-postgres} >/dev/null 2>&1; then
              echo "Postgres respondeu via pg_isready"
              exit 0
            fi
            # Se docker-compose exec falhar porque o comando não existe, faz fallback para checagem TCP
            if [ $i -eq 1 ]; then
              echo "pg_isready não disponível ou falhou — futuramente usarei checagem TCP como fallback"
            fi
            # Checagem TCP local (útil quando porta está mapeada para o host)
            if bash -c "</dev/tcp/localhost/5432" >/dev/null 2>&1; then
              echo "Postgres aceitando conexões na porta 5432 (host)"
              exit 0
            fi
            sleep 1
          done

          echo "Timeout aguardando Postgres — exibindo logs para diagnóstico"
          docker-compose logs --no-color --tail=200 postgres-db || true
          exit 1

      - name: 🩺 Verificar status dos contêineres
        run: |
          echo "--- Status dos Contêineres ---"
          docker-compose ps
          echo "--- Logs do Banco de Dados ---"
          docker-compose logs postgres-db || echo "Serviço 'postgres-db' não encontrado ou sem logs."
          echo "--- Logs da API ---"
          docker-compose logs api-spring || echo "Serviço 'api-spring' não encontrado ou sem logs."

      - name: 📞 Realizar teste de saúde na API
        run: |
          echo "Testando endpoint swagger..."
          if curl --fail --silent --show-error --max-time 10 http://localhost:8080/swagger-ui/index.html >/dev/null 2>&1; then
            echo "Swagger respondeu"
          else
            echo "Swagger não respondeu — imprimindo últimos logs da API para diagnóstico"
            docker-compose logs --no-color --tail=300 api-spring || true
            exit 1
          fi

      - name: 🛑 Parar os contêineres após teste
        if: always()
        run: docker-compose down

      - name: ✅ Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🚀 Build e Push da imagem para o Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/locadora-veiculos:latest
