name: CI/CD Docker build and Test

on:
  push:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: ▶️ Criar arquivo .env a partir de Secrets (não mostrar valores)
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          echo "Verificando se os Secrets necessários estão definidos..."
          if [ -z "$DB_PASSWORD" ] || [ -z "$JWT_SECRET" ]; then
            echo "ERROR: Secrets DB_PASSWORD e/ou JWT_SECRET não estão definidos."
            echo "Por favor, adicione os secrets no repositório: Settings → Secrets and variables → Actions."
            echo "Exemplo (gh): gh secret set DB_PASSWORD -b \"my_db_password\" -R OWNER/REPO"
            exit 1
          fi
          echo "Criando .env com as variáveis necessárias (não exibindo valores)..."
          printf "DB_PASSWORD=%s\n" "$DB_PASSWORD" > .env
          printf "JWT_SECRET=%s\n" "$JWT_SECRET" >> .env

      - name: 🔧 Instalar o docker compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: 🐋 Subir ambiente com Docker Compose (rebuild)
        run: docker-compose up -d --build --remove-orphans

      - name: ⏳ Esperar Postgres ficar healthy (até ~60s)
        run: |
          echo "Aguardando postgres-db ficar healthy (até ~60s)..."
          OK=0
          for i in $(seq 1 30); do
            cid=$(docker-compose ps -q postgres-db || true)
            if [ -n "$cid" ]; then
              status=$(docker inspect --format='{{.State.Health.Status}}' $cid 2>/dev/null || echo "unknown")
              echo "postgres-db health: $status"
              if [ "$status" = "healthy" ]; then
                OK=1
                break
              fi
            else
              echo "postgres-db container ainda não criado"
            fi
            sleep 2
          done
          if [ "$OK" -ne 1 ]; then
            echo "Postgres não ficou healthy após espera. Logs do Postgres:"
            docker-compose logs --no-color --tail=200 postgres-db || true
            exit 1
          fi

      - name: ⏳ Esperar API (startup via logs, até ~120s)
        run: |
          echo "Aguardando mensagens de startup da API (até ~120s)..."
          STARTED=0
          for i in $(seq 1 60); do
            docker-compose ps || true
            if docker-compose logs --no-color --tail=200 api-spring | grep -E "Started .*Application|Tomcat started|Started" >/dev/null 2>&1; then
              echo "Startup detectado nos logs da API"
              STARTED=1
              break
            fi
            sleep 2
          done
          if [ "$STARTED" -ne 1 ]; then
            echo "Não detectado startup da API nos logs. Mostrando últimos logs:"
            docker-compose logs --no-color --tail=500 api-spring || true
            exit 1
          fi

      - name: ⏱️ Aguardar os contêineres estabilizarem (curto)
        run: |
          echo "Aguardando 5 segundos adicionais para estabilizar..."
          sleep 5

      - name: 🩺 Verificar status dos contêineres
        run: |
          echo "--- Status dos Contêineres ---"
          docker-compose ps || true
          echo "--- Inspect health (postgres-db / api-spring) ---"
          for svc in postgres-db api-spring; do
            cid=$(docker-compose ps -q $svc || true)
            if [ -n "$cid" ]; then
              echo "$svc -> container id: $cid"
              docker inspect --format 'State: {{.State.Status}}  Health: {{with .State.Health}}{{.Status}}{{else}}(no healthcheck){{end}}' $cid || true
            else
              echo "$svc -> container not found"
            fi
          done

      - name: 📞 Realizar teste de saúde na API (mais rápido)
        run: |
          set -e
          # Testa endpoints em ordem: actuator/health e depois swagger como fallback
          TARGETS=("http://localhost:8080/actuator/health" "http://localhost:8080/swagger-ui/index.html")
          ATTEMPTS=12
          SLEEP=5

          for tgt in "${TARGETS[@]}"; do
            echo "Tentando endpoint: $tgt"
            for i in $(seq 1 $ATTEMPTS); do
              if curl --fail --silent --show-error --max-time 5 "$tgt" > /dev/null 2>&1; then
                echo "Endpoint $tgt respondeu (tentativa $i)."
                exit 0
              else
                echo "Tentativa $i para $tgt falhou, aguardando ${SLEEP}s..."
                # Mostrar um resumo rápido dos logs para diagnóstico sem imprimir tudo
                docker-compose ps || true
                docker-compose logs --no-color --tail=50 api-spring || true
                sleep $SLEEP
              fi
            done
            echo "Endpoint $tgt não respondeu após $ATTEMPTS tentativas, tentando próximo endpoint..."
          done

          echo "Nenhum endpoint respondeu. Imprimindo logs completos para depuração..."
          docker-compose logs --no-color --tail=500 api-spring || true
          docker-compose logs --no-color --tail=500 postgres-db || true

          echo "--- Últimas linhas relevantes (Exception / ERROR) ---"
          docker-compose logs --no-color api-spring | tail -n 200 | grep -E "Exception|ERROR|Caused by" || true

          exit 1

      - name: 🛑 Parar os contêineres após teste
        if: always()
        run: docker-compose down

      - name: ✅ Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🚀 Preparar buildx
        uses: docker/setup-buildx-action@v2

      - name: 🚀 Build e Push da imagem para o Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/locadora-veiculos:latest
